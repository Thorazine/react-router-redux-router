{"version":3,"sources":["crossbrowser.js","main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"libs.bundle.js","sourcesContent":["// Avoid `console` errors in browsers that lack a console.\n(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n        'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());","if(location.host == 'localhost') { document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1\"></' + 'script>') }\n\n\nvar oldStates = [];\nvar initState = {\n\ttext: 'blaaat',\n}\n\nfunction setGlobalState(state) {\n\t// save the old state\n\toldStates.push(initState);\n\tinitState = state;\n}\n\n\n\n\n\n\n\n// Request to api with fallback to other clusters\n\n// prepare the call\n\nvar request = function(url, type, data) {\n\treturn Q.Promise(function(response, error) {\n\t\turl = (typeof url === \"undefined\") ? 'test' : url;\n\t\ttype = (typeof type === \"undefined\") ? 'GET' : type;\n\t\tdata = (typeof data === \"undefined\") ? {} : data;\n\n\t\trunRequest(baseUrlApi + url, type, data).then(function(successReq) {\n\t\t\tresponse(successReq);\n\t\t}, function(errorReq) {\n\t\t\terror(errorReq);\n\t\t});\n\t});\n}\n\n\n// run the requests\nvar runRequest = function(connectUrl, type, data) {\n\treturn Q.Promise(function(successReq, errorReq) {\n\n\t\tjQuery.ajax({\n\t        url: connectUrl,\n\t        type: type,\n\t        cache: false,\n\t    \tdata: data,\n\t\t\tsuccess: function(data){\n\t\t        successReq({\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\terror: false,\n\t\t\t\t\tdata: data\n\t\t\t\t});\n\t\t    },\n\t\t    statusCode: {\n\t\t\t    404: function() {\n\t\t\t      \terrorReq({ success: false, error: '404: Not found', data: null });\n\t\t\t    },\n\t\t\t    403: function() {\n\t\t\t      \tsuccessReq({ success: false, error: 'You are not logged in. Redirecting', data: null });\n\t\t\t    },\n\t\t\t    401: function() {\n\t\t\t      \terrorReq({ success: false, error: '401: Credentials incorrect', data: null });\n\t\t\t    },\n\t\t\t    400: function() {\n\t\t\t       console.log('bad request');\n\t\t\t    },\n\t\t\t    500: function() {\n\t\t\t    \terrorReq({ success: false, error: '500: Internal server error', data: null });\n\t\t\t    },\n\t\t\t    501: function() {\n\t\t\t    \terrorReq({ success: false, error: '501: Gateway Timeout', data: null });\n\t\t\t    },\n\t\t\t    503: function() {\n\t\t\t    \terrorReq({ success: false, error: '503: Not availible', data: null });\n\t\t\t    },\n\t\t\t    504: function() {\n\t\t\t    \terrorReq({ success: false, error: '504: Gateway Timeout', data: null });\n\t\t\t    }\n\t\t  \t},\n\t\t  \terror: function() {\n\t\t  \t\terrorReq({ success: false, error: 'something went wrong', data: null });\n\t\t\t}\n\t  \t});\n\t});\n}\n\n"],"sourceRoot":"/source/"}